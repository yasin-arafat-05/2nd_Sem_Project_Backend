version: '3.8'

services:
  # API Gateway
  api-gateway:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - user-service
      - product-service
      - order-service
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == manager]

  # User Management Service
  user-service:
    build: ./services/user-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your-secret-key
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]

  # Product Management Service
  product-service:
    build: ./services/product-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      - postgres
      - redis
      - elasticsearch
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]

  # Order Management Service
  order-service:
    build: ./services/order-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 3
      placement:
        constraints: [node.role == worker]

  # Location Service
  location-service:
    build: ./services/location-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - GOOGLE_MAPS_API_KEY=your-google-maps-api-key
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]

  # AI/ML Service
  ai-service:
    build: ./services/ai-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=your-openai-api-key
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]

  # Marketing Service
  marketing-service:
    build: ./services/marketing-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]

  # Notification Service
  notification-service:
    build: ./services/notification-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
      - EMAIL_SERVICE_API_KEY=your-email-api-key
      - SMS_SERVICE_API_KEY=your-sms-api-key
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]

  # Analytics Service
  analytics-service:
    build: ./services/analytics-service
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - CLICKHOUSE_URL=http://clickhouse:8123
    depends_on:
      - postgres
      - clickhouse
    deploy:
      replicas: 2
      placement:
        constraints: [node.role == worker]

  # Celery Worker
  celery-worker:
    build: ./services/celery-worker
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 5
      placement:
        constraints: [node.role == worker]

  # Celery Beat (Scheduler)
  celery-beat:
    build: ./services/celery-beat
    environment:
      - DATABASE_URL=postgresql://user:password@postgres:5432/ecommerce
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=ecommerce
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # Redis Cache
  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # Elasticsearch
  elasticsearch:
    image: elasticsearch:8.11.0
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # ClickHouse
  clickhouse:
    image: clickhouse/clickhouse-server:latest
    environment:
      - CLICKHOUSE_DB=analytics
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    ports:
      - "3000:3000"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

  # Jaeger (Distributed Tracing)
  jaeger:
    image: jaegertracing/all-in-one:latest
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"
      - "14268:14268"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  postgres_data:
  redis_data:
  elasticsearch_data:
  clickhouse_data:
  minio_data:
  prometheus_data:
  grafana_data:

networks:
  default:
    driver: overlay
    attachable: true
